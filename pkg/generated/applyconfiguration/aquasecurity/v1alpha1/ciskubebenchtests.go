// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// CISKubeBenchTestsApplyConfiguration represents an declarative configuration of the CISKubeBenchTests type for use
// with apply.
type CISKubeBenchTestsApplyConfiguration struct {
	Section *string                                `json:"section,omitempty"`
	Pass    *int                                   `json:"pass,omitempty"`
	Fail    *int                                   `json:"fail,omitempty"`
	Warn    *int                                   `json:"warn,omitempty"`
	Info    *int                                   `json:"info,omitempty"`
	Desc    *string                                `json:"desc,omitempty"`
	Results []CISKubeBenchResultApplyConfiguration `json:"results,omitempty"`
}

// CISKubeBenchTestsApplyConfiguration constructs an declarative configuration of the CISKubeBenchTests type for use with
// apply.
func CISKubeBenchTests() *CISKubeBenchTestsApplyConfiguration {
	return &CISKubeBenchTestsApplyConfiguration{}
}

// WithSection sets the Section field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Section field is set to the value of the last call.
func (b *CISKubeBenchTestsApplyConfiguration) WithSection(value string) *CISKubeBenchTestsApplyConfiguration {
	b.Section = &value
	return b
}

// WithPass sets the Pass field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Pass field is set to the value of the last call.
func (b *CISKubeBenchTestsApplyConfiguration) WithPass(value int) *CISKubeBenchTestsApplyConfiguration {
	b.Pass = &value
	return b
}

// WithFail sets the Fail field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Fail field is set to the value of the last call.
func (b *CISKubeBenchTestsApplyConfiguration) WithFail(value int) *CISKubeBenchTestsApplyConfiguration {
	b.Fail = &value
	return b
}

// WithWarn sets the Warn field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Warn field is set to the value of the last call.
func (b *CISKubeBenchTestsApplyConfiguration) WithWarn(value int) *CISKubeBenchTestsApplyConfiguration {
	b.Warn = &value
	return b
}

// WithInfo sets the Info field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Info field is set to the value of the last call.
func (b *CISKubeBenchTestsApplyConfiguration) WithInfo(value int) *CISKubeBenchTestsApplyConfiguration {
	b.Info = &value
	return b
}

// WithDesc sets the Desc field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Desc field is set to the value of the last call.
func (b *CISKubeBenchTestsApplyConfiguration) WithDesc(value string) *CISKubeBenchTestsApplyConfiguration {
	b.Desc = &value
	return b
}

// WithResults adds the given value to the Results field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Results field.
func (b *CISKubeBenchTestsApplyConfiguration) WithResults(values ...*CISKubeBenchResultApplyConfiguration) *CISKubeBenchTestsApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithResults")
		}
		b.Results = append(b.Results, *values[i])
	}
	return b
}
