// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	aquasecurityv1alpha1 "github.com/kube-security-manager/kube-security-manager/pkg/apis/aquasecurity/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// ConfigAuditReportDataApplyConfiguration represents an declarative configuration of the ConfigAuditReportData type for use
// with apply.
type ConfigAuditReportDataApplyConfiguration struct {
	UpdateTimestamp *v1.Time                                `json:"updateTimestamp,omitempty"`
	Scanner         *ScannerApplyConfiguration              `json:"scanner,omitempty"`
	Summary         *ConfigAuditSummaryApplyConfiguration   `json:"summary,omitempty"`
	Checks          []CheckApplyConfiguration               `json:"checks,omitempty"`
	PodChecks       []CheckApplyConfiguration               `json:"podChecks,omitempty"`
	ContainerChecks map[string][]aquasecurityv1alpha1.Check `json:"containerChecks,omitempty"`
}

// ConfigAuditReportDataApplyConfiguration constructs an declarative configuration of the ConfigAuditReportData type for use with
// apply.
func ConfigAuditReportData() *ConfigAuditReportDataApplyConfiguration {
	return &ConfigAuditReportDataApplyConfiguration{}
}

// WithUpdateTimestamp sets the UpdateTimestamp field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the UpdateTimestamp field is set to the value of the last call.
func (b *ConfigAuditReportDataApplyConfiguration) WithUpdateTimestamp(value v1.Time) *ConfigAuditReportDataApplyConfiguration {
	b.UpdateTimestamp = &value
	return b
}

// WithScanner sets the Scanner field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Scanner field is set to the value of the last call.
func (b *ConfigAuditReportDataApplyConfiguration) WithScanner(value *ScannerApplyConfiguration) *ConfigAuditReportDataApplyConfiguration {
	b.Scanner = value
	return b
}

// WithSummary sets the Summary field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Summary field is set to the value of the last call.
func (b *ConfigAuditReportDataApplyConfiguration) WithSummary(value *ConfigAuditSummaryApplyConfiguration) *ConfigAuditReportDataApplyConfiguration {
	b.Summary = value
	return b
}

// WithChecks adds the given value to the Checks field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Checks field.
func (b *ConfigAuditReportDataApplyConfiguration) WithChecks(values ...*CheckApplyConfiguration) *ConfigAuditReportDataApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithChecks")
		}
		b.Checks = append(b.Checks, *values[i])
	}
	return b
}

// WithPodChecks adds the given value to the PodChecks field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the PodChecks field.
func (b *ConfigAuditReportDataApplyConfiguration) WithPodChecks(values ...*CheckApplyConfiguration) *ConfigAuditReportDataApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithPodChecks")
		}
		b.PodChecks = append(b.PodChecks, *values[i])
	}
	return b
}

// WithContainerChecks puts the entries into the ContainerChecks field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the ContainerChecks field,
// overwriting an existing map entries in ContainerChecks field with the same key.
func (b *ConfigAuditReportDataApplyConfiguration) WithContainerChecks(entries map[string][]aquasecurityv1alpha1.Check) *ConfigAuditReportDataApplyConfiguration {
	if b.ContainerChecks == nil && len(entries) > 0 {
		b.ContainerChecks = make(map[string][]aquasecurityv1alpha1.Check, len(entries))
	}
	for k, v := range entries {
		b.ContainerChecks[k] = v
	}
	return b
}
