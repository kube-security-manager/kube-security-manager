// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// VulnerabilityReportDataApplyConfiguration represents an declarative configuration of the VulnerabilityReportData type for use
// with apply.
type VulnerabilityReportDataApplyConfiguration struct {
	UpdateTimestamp *v1.Time                                `json:"updateTimestamp,omitempty"`
	Scanner         *ScannerApplyConfiguration              `json:"scanner,omitempty"`
	Registry        *RegistryApplyConfiguration             `json:"registry,omitempty"`
	Artifact        *ArtifactApplyConfiguration             `json:"artifact,omitempty"`
	Summary         *VulnerabilitySummaryApplyConfiguration `json:"summary,omitempty"`
	Vulnerabilities []VulnerabilityApplyConfiguration       `json:"vulnerabilities,omitempty"`
}

// VulnerabilityReportDataApplyConfiguration constructs an declarative configuration of the VulnerabilityReportData type for use with
// apply.
func VulnerabilityReportData() *VulnerabilityReportDataApplyConfiguration {
	return &VulnerabilityReportDataApplyConfiguration{}
}

// WithUpdateTimestamp sets the UpdateTimestamp field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the UpdateTimestamp field is set to the value of the last call.
func (b *VulnerabilityReportDataApplyConfiguration) WithUpdateTimestamp(value v1.Time) *VulnerabilityReportDataApplyConfiguration {
	b.UpdateTimestamp = &value
	return b
}

// WithScanner sets the Scanner field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Scanner field is set to the value of the last call.
func (b *VulnerabilityReportDataApplyConfiguration) WithScanner(value *ScannerApplyConfiguration) *VulnerabilityReportDataApplyConfiguration {
	b.Scanner = value
	return b
}

// WithRegistry sets the Registry field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Registry field is set to the value of the last call.
func (b *VulnerabilityReportDataApplyConfiguration) WithRegistry(value *RegistryApplyConfiguration) *VulnerabilityReportDataApplyConfiguration {
	b.Registry = value
	return b
}

// WithArtifact sets the Artifact field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Artifact field is set to the value of the last call.
func (b *VulnerabilityReportDataApplyConfiguration) WithArtifact(value *ArtifactApplyConfiguration) *VulnerabilityReportDataApplyConfiguration {
	b.Artifact = value
	return b
}

// WithSummary sets the Summary field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Summary field is set to the value of the last call.
func (b *VulnerabilityReportDataApplyConfiguration) WithSummary(value *VulnerabilitySummaryApplyConfiguration) *VulnerabilityReportDataApplyConfiguration {
	b.Summary = value
	return b
}

// WithVulnerabilities adds the given value to the Vulnerabilities field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Vulnerabilities field.
func (b *VulnerabilityReportDataApplyConfiguration) WithVulnerabilities(values ...*VulnerabilityApplyConfiguration) *VulnerabilityReportDataApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithVulnerabilities")
		}
		b.Vulnerabilities = append(b.Vulnerabilities, *values[i])
	}
	return b
}
