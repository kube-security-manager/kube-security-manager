// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kube-security-manager/kube-security-manager/pkg/apis/aquasecurity/v1alpha1"
)

// CheckApplyConfiguration represents an declarative configuration of the Check type for use
// with apply.
type CheckApplyConfiguration struct {
	ID          *string                       `json:"checkID,omitempty"`
	Title       *string                       `json:"title,omitempty"`
	Description *string                       `json:"description,omitempty"`
	Severity    *v1alpha1.Severity            `json:"severity,omitempty"`
	Category    *string                       `json:"category,omitempty"`
	Messages    []string                      `json:"messages,omitempty"`
	Remediation *string                       `json:"remediation,omitempty"`
	Success     *bool                         `json:"success,omitempty"`
	Scope       *CheckScopeApplyConfiguration `json:"scope,omitempty"`
}

// CheckApplyConfiguration constructs an declarative configuration of the Check type for use with
// apply.
func Check() *CheckApplyConfiguration {
	return &CheckApplyConfiguration{}
}

// WithID sets the ID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ID field is set to the value of the last call.
func (b *CheckApplyConfiguration) WithID(value string) *CheckApplyConfiguration {
	b.ID = &value
	return b
}

// WithTitle sets the Title field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Title field is set to the value of the last call.
func (b *CheckApplyConfiguration) WithTitle(value string) *CheckApplyConfiguration {
	b.Title = &value
	return b
}

// WithDescription sets the Description field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Description field is set to the value of the last call.
func (b *CheckApplyConfiguration) WithDescription(value string) *CheckApplyConfiguration {
	b.Description = &value
	return b
}

// WithSeverity sets the Severity field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Severity field is set to the value of the last call.
func (b *CheckApplyConfiguration) WithSeverity(value v1alpha1.Severity) *CheckApplyConfiguration {
	b.Severity = &value
	return b
}

// WithCategory sets the Category field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Category field is set to the value of the last call.
func (b *CheckApplyConfiguration) WithCategory(value string) *CheckApplyConfiguration {
	b.Category = &value
	return b
}

// WithMessages adds the given value to the Messages field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Messages field.
func (b *CheckApplyConfiguration) WithMessages(values ...string) *CheckApplyConfiguration {
	for i := range values {
		b.Messages = append(b.Messages, values[i])
	}
	return b
}

// WithRemediation sets the Remediation field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Remediation field is set to the value of the last call.
func (b *CheckApplyConfiguration) WithRemediation(value string) *CheckApplyConfiguration {
	b.Remediation = &value
	return b
}

// WithSuccess sets the Success field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Success field is set to the value of the last call.
func (b *CheckApplyConfiguration) WithSuccess(value bool) *CheckApplyConfiguration {
	b.Success = &value
	return b
}

// WithScope sets the Scope field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Scope field is set to the value of the last call.
func (b *CheckApplyConfiguration) WithScope(value *CheckScopeApplyConfiguration) *CheckApplyConfiguration {
	b.Scope = value
	return b
}
